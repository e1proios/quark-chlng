services:
#    app-mongo:
#        image: mongo:latest
#        container_name: app-mongo
#        hostname: app-mongo
#        command: mongod --quiet --logpath /dev/null
#        environment:
#            MONGO_INITDB_ROOT_USERNAME: "admin"
#            MONGO_INITDB_ROOT_PASSWORD: "admin"
#        ports:
#            - "27017:27017"
#        volumes:
#            - ./mongo-init:/docker-entrypoint-initdb.d
#        healthcheck:
#            test: mongosh --eval "db.adminCommand('ping')" -u admin -p admin --authenticationDatabase admin
#            interval: 10s
#            timeout: 30s
#            retries: 3
#        restart: unless-stopped
#        networks:
#            - app-network

#    file-server:
#        image: python:3.9-alpine
#        container_name: file-server
#        ports:
#            - "3333:3333"
#        volumes:
#            - ./static_files:/app
#        working_dir: /app
#        command: python -m http.server 3333
#        restart: unless-stopped
#        networks:
#            - app-network

#    franz-kafka:
#        image: apache/kafka:4.0.0
#        container_name: franz-kafka
#        hostname: franz-kafka
#        environment:
#            KAFKA_NODE_ID: 1
#            KAFKA_PROCESS_ROLES: broker,controller
#
#            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@franz-kafka:9093
#            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#            KAFKA_CREATE_TOPICS: "invoice-urls:1:1,processed-invoices:1:3"
#
#            KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://franz-kafka:9092
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#
#            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#        ports:
#            - "9092:9092"
#        networks:
#            - app-network
    postgres:
        image: postgres:15-alpine
        container_name: keycloak-postgres
        hostname: postgres
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: keycloak
            POSTGRES_PASSWORD: password
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
            interval: 30s
            timeout: 10s
            retries: 3

    app-keycloak:
        image: quay.io/keycloak/keycloak:latest
        container_name: app-keycloak
        hostname: app-keycloak
        command: start-dev --import-realm
        environment:
            KC_DB: postgres
            KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
            KC_DB_USERNAME: keycloak
            KC_DB_PASSWORD: password

            KC_BOOTSTRAP_ADMIN_USERNAME: admin
            KC_BOOTSTRAP_ADMIN_PASSWORD: admin

#            KC_HOSTNAME: localhost
            KC_HTTP_ENABLED: true
            KC_HEALTH_ENABLED: true
#        healthcheck:
#            test: [ "CMD-SHELL", 'exec 3<>/dev/tcp/localhost/8888; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR' ]
#            interval: 30s
#            timeout: 10s
#            retries: 3
        ports:
            - "8888:8080"
        volumes:
            - ./keycloak:/opt/keycloak/data/import
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - app-network

    iban-blacklist-service:
        container_name: iban-blacklist-service
        hostname: iban-blacklist-service
        depends_on:
#            app-mongo:
#                condition: service_healthy
            - app-keycloak
#                condition: service_healthy
        build:
            context: ./iban-blacklist-service/
            dockerfile: ./src/main/docker/Dockerfile.jvm
        ports:
            - "8080:8080"
            - "${DEBUG_PORT_BLACKLIST_SVC:-5005}:${DEBUG_PORT_BLACKLIST_SVC:-5005}"
        environment:
            - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT_BLACKLIST_SVC:-5005}
            - QUARKUS_HTTP_PORT=8080
        networks:
            - app-network

#    invoice-scanner-service:
#        container_name: invoice-scanner-service
#        hostname: invoice-scanner-service
#        depends_on:
#            - iban-blacklist-service
##            - file-server
##            - franz-kafka
#        build:
#            context: ./invoice-scanner-service/
#            dockerfile: ./src/main/docker/Dockerfile.jvm
#        ports:
#            - "8088:8080"
#            - "${DEBUG_PORT_SCANNER_SVC:-5006}:${DEBUG_PORT_SCANNER_SVC:-5006}"
#        environment:
#            - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT_SCANNER_SVC:-5006}
#            - QUARKUS_HTTP_PORT=8080
#        networks:
#            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    postgres_data:
