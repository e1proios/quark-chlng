services:
    app-mongo:
        image: mongo:latest
        container_name: app-mongo
        hostname: app-mongo
        command: mongod --quiet --logpath /dev/null
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
            MONGO_DB: ${MONGO_DB}
            MONGO_DB_USER_LOGIN: ${MONGO_DB_USER_LOGIN}
            MONGO_DB_USER_PASSWORD: ${MONGO_DB_USER_PASSWORD}
        ports:
            - "27217:27017"
        volumes:
            - ./infrastructure/mongodb/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
        healthcheck:
            test: mongosh --eval "db.adminCommand('ping')" -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin
            interval: 10s
            timeout: 30s
            retries: 3
        restart: unless-stopped
        networks:
            - app-network

    file-server:
        image: python:3.9-alpine
        container_name: file-server
        ports:
            - "3333:3333"
        volumes:
            - ./infrastructure/file-server/files:/app
        working_dir: /app
        command: python -m http.server 3333
        restart: unless-stopped
        networks:
            - app-network

    franz-kafka:
        image: apache/kafka:4.0.0
        container_name: franz-kafka
        hostname: franz-kafka
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller

            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@franz-kafka:9093
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CREATE_TOPICS: "${KAFKA_INPUT_TOPIC}:1:1,${KAFKA_OUTPUT_TOPIC}:1:3"

            KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT

            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        ports:
            - "9092:9092"
        networks:
            - app-network

    keycloak-db:
        image: postgres:15-alpine
        container_name: keycloak-db
        hostname: keycloak-db
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: ${KEYCLOAK_DB_USER_LOGIN}
            POSTGRES_PASSWORD: ${KEYCLOAK_DB_USER_PASSWORD}
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
            interval: 30s
            timeout: 10s
            retries: 3
        ports:
            - "5432:5432"
        volumes:
            - keycloak_db_data:/var/lib/postgresql/data
        networks:
            - app-network

    app-keycloak:
        image: quay.io/keycloak/keycloak:latest
        container_name: app-keycloak
        hostname: app-keycloak
        command:
            - start-dev
            - --import-realm
        environment:
            KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
            KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

            KC_DB: postgres
            KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
            KC_DB_USERNAME: ${KEYCLOAK_DB_USER_LOGIN}
            KC_DB_PASSWORD: ${KEYCLOAK_DB_USER_PASSWORD}

            KC_HTTP_ENABLED: true
            KC_HEALTH_ENABLED: true
            KC_METRICS_ENABLED: true
        healthcheck:
            test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost:9000\\r\\nConnection: close\\r\\n\\r\\n' >&3; cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
        ports:
            - "8888:8080"
            - "9000:9000"
        depends_on:
            keycloak-db:
                condition: service_healthy
        volumes:
            - ./infrastructure/keycloak/realms:/opt/keycloak/data/import
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    keycloak_db_data:
